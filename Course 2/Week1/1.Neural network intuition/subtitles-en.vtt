WEBVTT

1
00:00:00.650 --> 00:00:03.210
In the last video, you saw how

2
00:00:03.210 --> 00:00:06.425
a neural network works in a
demand prediction example.

3
00:00:06.425 --> 00:00:09.270
Let's take a look at how you
can apply a similar type of

4
00:00:09.270 --> 00:00:13.335
idea to computer vision
application. Let's dive in.

5
00:00:13.335 --> 00:00:15.735
If you're building a face
recognition application,

6
00:00:15.735 --> 00:00:17.219
you might want to train

7
00:00:17.219 --> 00:00:19.950
a neural network that takes
as input a picture like

8
00:00:19.950 --> 00:00:22.680
this and outputs the identity

9
00:00:22.680 --> 00:00:24.795
of the person in the picture.

10
00:00:24.795 --> 00:00:29.445
This image is 1,000
by 1,000 pixels.

11
00:00:29.445 --> 00:00:32.880
Its representation
in the computer is

12
00:00:32.880 --> 00:00:36.435
actually as 1,000 by 1,000 grid,

13
00:00:36.435 --> 00:00:38.670
or also called 1,000 by 1,000

14
00:00:38.670 --> 00:00:42.225
matrix of pixel
intensity values.

15
00:00:42.225 --> 00:00:45.080
In this example, my
pixel intensity values

16
00:00:45.080 --> 00:00:46.700
or pixel brightness values,

17
00:00:46.700 --> 00:00:50.745
goes from 0-255 and so

18
00:00:50.745 --> 00:00:53.100
197 here would be

19
00:00:53.100 --> 00:00:54.660
the brightness of the pixel

20
00:00:54.660 --> 00:00:56.495
in the very upper
left of the image,

21
00:00:56.495 --> 00:01:00.245
185 is brightness of the
pixel, one pixel over,

22
00:01:00.245 --> 00:01:02.420
and so on down to

23
00:01:02.420 --> 00:01:06.455
214 would be the lower
right corner of this image.

24
00:01:06.455 --> 00:01:08.240
If you were to take

25
00:01:08.240 --> 00:01:10.760
these pixel intensity values

26
00:01:10.760 --> 00:01:13.385
and unroll them into a vector,

27
00:01:13.385 --> 00:01:16.280
you end up with a
list or a vector

28
00:01:16.280 --> 00:01:20.085
of a million pixel
intensity values.

29
00:01:20.085 --> 00:01:22.010
One million because 1,000 by

30
00:01:22.010 --> 00:01:24.910
1,000 square gives you
a million numbers.

31
00:01:24.910 --> 00:01:27.335
The face recognition problem is,

32
00:01:27.335 --> 00:01:29.855
can you train a neural network

33
00:01:29.855 --> 00:01:33.155
that takes as input a
feature vector with

34
00:01:33.155 --> 00:01:35.825
a million pixel
brightness values

35
00:01:35.825 --> 00:01:39.565
and outputs the identity of
the person in the picture.

36
00:01:39.565 --> 00:01:41.240
This is how you might build

37
00:01:41.240 --> 00:01:45.235
a neural network to
carry out this task.

38
00:01:45.235 --> 00:01:50.130
The input image X is fed
to this layer of neurons.

39
00:01:50.130 --> 00:01:52.055
This is the first hidden layer,

40
00:01:52.055 --> 00:01:55.595
which then extract
some features.

41
00:01:55.595 --> 00:01:58.100
The output of this
first hidden layer is

42
00:01:58.100 --> 00:02:00.720
fed to a second hidden layer and

43
00:02:00.720 --> 00:02:02.220
that output is fed to

44
00:02:02.220 --> 00:02:05.600
a third layer and then
finally to the output layer,

45
00:02:05.600 --> 00:02:06.870
which then estimates,

46
00:02:06.870 --> 00:02:10.495
say the probability of this
being a particular person.

47
00:02:10.495 --> 00:02:13.850
One interesting
thing would be if

48
00:02:13.850 --> 00:02:16.670
you look at a neural network
that's been trained on

49
00:02:16.670 --> 00:02:19.340
a lot of images of
faces and to try to

50
00:02:19.340 --> 00:02:20.540
visualize what are

51
00:02:20.540 --> 00:02:23.090
these hidden layers,
trying to compute.

52
00:02:23.090 --> 00:02:25.100
It turns out that when you

53
00:02:25.100 --> 00:02:27.620
train a system like this
on a lot of pictures

54
00:02:27.620 --> 00:02:30.695
of faces and you peer at

55
00:02:30.695 --> 00:02:33.470
the different neurons
in the hidden layers

56
00:02:33.470 --> 00:02:34.670
to figure out what they may be

57
00:02:34.670 --> 00:02:37.085
computing this is
what you might find.

58
00:02:37.085 --> 00:02:39.350
In the first hidden layer,

59
00:02:39.350 --> 00:02:42.305
you might find one
neuron that is looking

60
00:02:42.305 --> 00:02:46.670
for the low vertical line or
a vertical edge like that.

61
00:02:46.670 --> 00:02:49.065
A second neuron looking for

62
00:02:49.065 --> 00:02:52.340
a oriented line or
oriented edge like that.

63
00:02:52.340 --> 00:02:54.560
The third neuron
looking for a line

64
00:02:54.560 --> 00:02:57.400
at that orientation, and so on.

65
00:02:57.400 --> 00:03:00.545
In the earliest layers
of a neural network,

66
00:03:00.545 --> 00:03:02.855
you might find that the
neurons are looking for

67
00:03:02.855 --> 00:03:07.585
very short lines or very
short edges in the image.

68
00:03:07.585 --> 00:03:10.815
If you look at the
next hidden layer,

69
00:03:10.815 --> 00:03:16.690
you find that these neurons
might learn to group together

70
00:03:16.690 --> 00:03:18.550
lots of little short lines and

71
00:03:18.550 --> 00:03:20.590
little short edge segments in

72
00:03:20.590 --> 00:03:22.650
order to look for
parts of faces.

73
00:03:22.650 --> 00:03:26.095
For example, each of these
little square boxes is

74
00:03:26.095 --> 00:03:30.575
a visualization of what that
neuron is trying to detect.

75
00:03:30.575 --> 00:03:32.320
This first neuron
looks like it's

76
00:03:32.320 --> 00:03:34.045
trying to detect the presence or

77
00:03:34.045 --> 00:03:38.230
absence of an eye in a certain
position of the image.

78
00:03:38.230 --> 00:03:40.750
The second neuron,
looks like it's trying

79
00:03:40.750 --> 00:03:43.170
to detect like a corner of

80
00:03:43.170 --> 00:03:45.970
a nose and maybe
this neuron over

81
00:03:45.970 --> 00:03:50.720
here is trying to detect
the bottom of an ear.

82
00:03:50.720 --> 00:03:52.810
Then as you look
at the next hidden

83
00:03:52.810 --> 00:03:54.380
layer in this example,

84
00:03:54.380 --> 00:03:56.720
the neural network
is aggregating

85
00:03:56.720 --> 00:03:59.480
different parts of faces to then

86
00:03:59.480 --> 00:04:01.835
try to detect presence
or absence of

87
00:04:01.835 --> 00:04:05.260
larger, coarser face shapes.

88
00:04:05.260 --> 00:04:07.765
Then finally, detecting how much

89
00:04:07.765 --> 00:04:12.020
the face corresponds to
different face shapes creates

90
00:04:12.020 --> 00:04:14.570
a rich set of features
that then helps

91
00:04:14.570 --> 00:04:16.370
the output layer try to

92
00:04:16.370 --> 00:04:19.030
determine the identity
of the person picture.

93
00:04:19.030 --> 00:04:21.090
A remarkable thing about

94
00:04:21.090 --> 00:04:22.580
the neural network
is you can learn

95
00:04:22.580 --> 00:04:24.335
these feature detectors at

96
00:04:24.335 --> 00:04:27.410
the different hidden
layers all by itself.

97
00:04:27.410 --> 00:04:29.930
In this example, no
one ever told it to

98
00:04:29.930 --> 00:04:32.570
look for short little
edges in the first layer,

99
00:04:32.570 --> 00:04:34.695
and eyes and noses
and face parts in

100
00:04:34.695 --> 00:04:36.260
the second layer and then more

101
00:04:36.260 --> 00:04:38.450
complete face shapes
at the third layer.

102
00:04:38.450 --> 00:04:40.610
The neural network is able
to figure out these things

103
00:04:40.610 --> 00:04:42.840
all by itself from data.

104
00:04:42.840 --> 00:04:45.665
Just one note, in
this visualization,

105
00:04:45.665 --> 00:04:47.870
the neurons in the
first hidden layer

106
00:04:47.870 --> 00:04:49.430
are shown looking at

107
00:04:49.430 --> 00:04:53.490
relatively small windows
to look for these edges.

108
00:04:53.490 --> 00:04:56.540
In the second hidden layer
is looking at bigger window,

109
00:04:56.540 --> 00:04:57.980
and the third hidden layer is

110
00:04:57.980 --> 00:05:00.065
looking at even bigger window.

111
00:05:00.065 --> 00:05:03.470
These little neurons
visualizations

112
00:05:03.470 --> 00:05:04.970
actually correspond
to differently

113
00:05:04.970 --> 00:05:07.030
sized regions in the image.

114
00:05:07.030 --> 00:05:09.830
Just for fun, let's see
what happens if you were to

115
00:05:09.830 --> 00:05:13.760
train this neural network
on a different dataset,

116
00:05:13.760 --> 00:05:16.805
say on lots of pictures of cars,

117
00:05:16.805 --> 00:05:18.545
picture on the side.

118
00:05:18.545 --> 00:05:24.200
The same learning algorithm
is asked to detect cars,

119
00:05:24.200 --> 00:05:27.780
will then learn edges
in the first layer.

120
00:05:27.780 --> 00:05:29.960
Pretty similar but then they'll

121
00:05:29.960 --> 00:05:32.180
learn to detect parts of cars in

122
00:05:32.180 --> 00:05:34.280
the second hidden
layer and then more

123
00:05:34.280 --> 00:05:37.645
complete car shapes in
the third hidden layer.

124
00:05:37.645 --> 00:05:42.155
Just by feeding it
different data,

125
00:05:42.155 --> 00:05:44.600
the neural network
automatically learns to detect

126
00:05:44.600 --> 00:05:48.260
very different features
so as to try to

127
00:05:48.260 --> 00:05:52.385
make the predictions
of car detection or

128
00:05:52.385 --> 00:05:54.260
person recognition
or whether there's a

129
00:05:54.260 --> 00:05:57.385
particular given task
that is trained on.

130
00:05:57.385 --> 00:05:59.480
That's how a neural
network works

131
00:05:59.480 --> 00:06:01.235
for computer vision application.

132
00:06:01.235 --> 00:06:02.975
In fact, later this week,

133
00:06:02.975 --> 00:06:04.460
you'll see how you can build

134
00:06:04.460 --> 00:06:06.320
a neural network
yourself and apply

135
00:06:06.320 --> 00:06:10.270
it to a handwritten digit
recognition application.

136
00:06:10.270 --> 00:06:13.325
So far we've been going
over the description of

137
00:06:13.325 --> 00:06:15.125
intuitions of neural networks

138
00:06:15.125 --> 00:06:17.665
to give you a feel
for how they work.

139
00:06:17.665 --> 00:06:19.250
In the next video,

140
00:06:19.250 --> 00:06:22.880
let's look more deeply into
the concrete mathematics and

141
00:06:22.880 --> 00:06:25.880
a concrete implementation
of details of how you

142
00:06:25.880 --> 00:06:29.555
actually build one or more
layers of a neural network,

143
00:06:29.555 --> 00:06:31.415
and therefore how
you can implement

144
00:06:31.415 --> 00:06:32.810
one of these things yourself.

145
00:06:32.810 --> 00:06:35.550
Let's go on to the next video.